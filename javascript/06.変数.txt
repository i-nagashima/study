/* 暗黙的な型変換
 * ------------------------------------------------------/
変数が呼ばれた状況によって変数の型が自動的に変換されること。
typeof <変数> で型がわかる

/* 厳格な等価性と抽象的な等価性
 * ------------------------------------------------------/
比較演算子
厳格な等価性　　a === b　型の比較あり
抽象的な等価性　a == b　 型の比較なし

/* プリミティブ型とオブジェクト
 * ------------------------------------------------------/
プリミティブ型
string number boolean undefined null symbol bigint
オブジェクト
プリミティブ型以外

/* 参照と分割代入
 * ------------------------------------------------------/
分割代入
let {a, b} = object;
オブジェクトから特定のプロパティを抽出して宣言を行う。

名前を変える場合
let { a: a2, b: b2 } = object;
a2 = ;
b2 = ;

関数の引数で分割代入をする
function fn({ prop }) {
    prop = ;
}

