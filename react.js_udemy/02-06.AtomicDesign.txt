/* Atomic Design とは
------------------------------------------------------------ */
画面要素を５段階に分け、組み合わせることでUIを実現
コンポーネント化された要素が画面を構成しているという考え方
React, Vue用というわけではない
モダンJavaScriptと相性が良い

/* ５段階のコンポーネント
------------------------------------------------------------ */
Atoms, Molecules, ORGANISMS, TEMPLATES, PAGES

/* Atoms (原子)
------------------------------------------------------------ */
最も小さくそれ以上分解できない要素
・ボタン
・ツイート入力テキストボックス
・アイコン
など

src/components/atoms
 button/
  PrimaryButton.jsx

export const PrimaryButton = (props) => {
  const { children } = props;
  return (
    <button>{children}</button>
  );
}
※この中でスタイルをあてていく。

/* Molecules (分子)
------------------------------------------------------------ */
Atomの組み合わせで意味を持つデザインパーツ
・アイコン＋メニュー名
・プロフィール画像＋テキストボックス
・アイコンセット
など

src/components/molecules
  SearchInput.jsx

export const SearchInput = () => {
  return (
    <div>
      <input />
      <PrimaryButton>検索</PrimaryButton> // Atomを使う
    </div>
  );
}
※この中でスタイルをあてていく。

/* Organisms (有機体)
------------------------------------------------------------ */
AtomやMoleculeの組み合わせで構成される単体である程度の意味を持つ要素群
・ツイート入力エリア
・サイドメニュー
・１つのツイートエリア
など

src/organisms
  user/
    UserCard.jsx

export const UserCard = () => {
  return (
    <div>

    </div>
  );
}
※この中でスタイルをあてていく。

/* Template (テンプレート)
------------------------------------------------------------ */
ページのレイアウトのみを表現する要素（実際のデータはもたない）
・サイドメニュー
・ツイートエリア
・トピックエリア等のレイアウト情報
など

src/components/templates
  DefaultLayout.jsx

export const DefaultLayout = (props) => {
  const { children } = props;
  return (
    <>
      <Header />
      {children}
      <Footer />
      <>
    </>
  );
}
※この中でスタイルをあてていく。

/* Pages (ページ)
------------------------------------------------------------ */
最終的に表示される１画面
・ページ遷移ごとに表示される各画面

src/components/pages
  Top.jsx

export const Top = () => {
  return (
    // routerとか使ってLinkも作っていく
    
    <SearchInput />
  );
}
※この中でスタイルをあてていく。

/* Atomic Designに取り組む時のポイント
------------------------------------------------------------ */
・あくまでベース
　Atomic Designはあくまで概念だと認識し、プロジェクトやチームに合わせてカスタマイズしていく
・初めから分けない
　慣れないうちに無理にコンポーネントに分けようとするとしんどい。まずは書いて定期的にリファクタリング
・要素の関心を意識
　「何に関心があるコンポーネントなのか」を意識しながら分割したりpropsを定義したりする


