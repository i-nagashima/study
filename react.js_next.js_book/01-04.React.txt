/* Create React App
------------------------------------------------------------ */
Reactのプロジェクトを作成する

# npxの場合
$ npx create-react-app <プロジェクト>
# npmの場合
$ npm init react-app <プロジェクト>

/* React Developer Tools
------------------------------------------------------------ */
Chrome
https://chrome.google.com/webstore


/* JSXでの{}
------------------------------------------------------------ */
JSXでは変数や関数は{}の中に書く
そのため、アロー関数、無名関数の{}は変数や関数として展開されてしまうので
{} → () もしくは 書かない
でやる
Array.map((value) => {

})
↓
Array.map((value) => (

))
or
Array.map((value) =>

/* JSXでのclass (css)
------------------------------------------------------------ */
classはだめ。JavaScriptのclassと区別つかないから
classNameとする

/* JSXでのイベント
------------------------------------------------------------ */
onclickはだめ。
onClickとする。他のイベントも同じ

/* JSXでの終了タグがないタグ
------------------------------------------------------------ */
<input>はだめ。
<input />とする。
もしくは <input></input>

/* コンテキスト (Rみたいな使い方)
------------------------------------------------------------ */
# コンテキストの作成
const <変数> = React.createContext(<値>));
※クラスの外側に定義する
# コンテキストの利用
static contextType = <変数> # コンテキストの作成の変数
this.context.xx で使う

/* ステートフック (関数コンポーネントでステートを使う)
------------------------------------------------------------ */
import React, {useState} from 'react';
const [<変数A>, <変数B>] = useState(<初期値>);
 変数A: ステートの値。ここから現在のステートの値が得られる。
 変数B: ステートの値を変更する関数。この変数に引数を付けて呼び出すっことでステートの値が変更される。

/* 副作用フック
------------------------------------------------------------ */
ステートが変更されたら実行するもの（それを副作用と呼ぶらしい）
import React, {useState, useEffect} from 'react';
useEffect(<関数>);
useEffect(() => {

});

# 再呼び出しのフックを指定する
useEffect(<関数>, [<ステート> (, <ステート>, ...]));
useEffect(() => {

}, [hoge1, hoge2]);

/* 独自フック (フックを作成する)
------------------------------------------------------------ */
# 「use」で始まる名前の関数を作成する
function useXXX() {
  const ステート
  const 関数
  return [ 値 ]
}
ex)
function useCounter() {
  const [num, setNum] = useState(0);
  const count = () => {
    setNum(num + 1);
  }
  return [num, count];
}

